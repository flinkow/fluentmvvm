<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<# Type[] types = { typeof(object), typeof(bool), typeof(byte), typeof(sbyte), typeof(char), typeof(decimal), typeof(double), typeof(float), typeof(short), typeof(ushort), typeof(int), typeof(uint), typeof(long), typeof(ulong), typeof(DateTime), typeof(string) }; #>
// <auto-generated>
// This file is generated by a T4 template. Make changes directly in the .tt file.
// </auto-generated>
#nullable enable
using System;
using System.ComponentModel;
using System.Runtime.CompilerServices;

namespace FluentMvvm
{
    /// <summary>
    ///     Provides methods that can be used to set a property value.
    /// </summary>
    /// <seealso cref="System.ComponentModel.INotifyPropertyChanged" />
    public interface IPropertySetExpression
    {
<# foreach (Type type in types) { #>
        /// <summary>
        ///     Sets the value of the specified property to <paramref name="value" /> and raises a
        ///     <see cref="INotifyPropertyChanged.PropertyChanged" /> event if the new value was different from the old value.
        /// </summary>
        /// <param name="value">The value to set the property to.</param>
        /// <param name="propertyName">
        ///     The name of the property. Filled in by the compiler automatically, do not specify explicitly.
        /// </param>
        /// <returns></returns>
        /// <exception cref="ArgumentException">
        ///     no public writable instance property named <paramref name="propertyName" /> could be found -or- <paramref name="propertyName" /> is empty or consists only of white-space characters.
        /// </exception>
        /// <exception cref="InvalidOperationException">
        ///     there are no backing fields of type <#= type == typeof(object) ? "<typeparamref name=\"T\" />" : "<see cref=\"" + type + "\" />" #>.
        /// </exception>
        IDependencyExpression Set<#= type == typeof(object) ? "<T>" : String.Empty #>(<#= type == typeof(object) ? "T" : type.Name #> value, [CallerMemberName] string propertyName = "");

<# } #>        

        /// <summary>
        ///     Sets the value of the specified property to <paramref name="value" /> and raises a
        ///     <see cref="INotifyPropertyChanged.PropertyChanged" /> event if the new value was different from the old value.
        /// </summary>
        /// <param name="value">The value to set the property to.</param>
        /// <param name="oldValue">A reference to the old value of the property. This can be a field.</param>
        /// <param name="propertyName">
        ///     The name of the property. Filled in by the compiler automatically, do not specify explicitly.
        /// </param>
        /// <returns></returns>
        /// <exception cref="ArgumentException">
        ///     no public writable instance property named <paramref name="propertyName" /> could be found -or- <paramref name="propertyName" /> is empty or consists only of white-space characters.
        /// </exception>
        IDependencyExpression Set<T>(T value, ref T oldValue, [CallerMemberName] string propertyName = "");
    }
}