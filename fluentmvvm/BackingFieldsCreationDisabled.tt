<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<# Type[] types = { typeof(object), typeof(bool), typeof(byte), typeof(sbyte), typeof(char), typeof(decimal), typeof(double), typeof(float), typeof(short), typeof(ushort), typeof(int), typeof(uint), typeof(long), typeof(ulong), typeof(DateTime), typeof(string) }; #>
// <auto-generated>
// This file is generated by a T4 template. Make changes directly in the .tt file.
// </auto-generated>
#nullable enable
using System;
using FluentMvvm.Internals;

namespace FluentMvvm
{
#if TEST
    internal class BackingFieldsCreationDisabled : IBackingFields
#else
    internal sealed class BackingFieldsCreationDisabled : IBackingFields
#endif
    {
#if TEST
        public virtual Type OnType { get; }
#else
        public Type OnType { get; }
#endif

#if TEST
        public BackingFieldsCreationDisabled()
        {
            this.OnType = default!;
        }
#endif

        public BackingFieldsCreationDisabled(Type onType) 
        {
            this.OnType = onType;
        }

<# foreach (Type type in types) { #>
        public <#= type == typeof(object) ? "T" : type.Name #> Get<#= type == typeof(object) ? "<T>" : type.Name #>(string propertyName)
        {
            ThrowHelper.ThrowNoBackingFieldsOfType<<#= type == typeof(object) ? "T" : type #>>(this.OnType);
            return default; // to make the compiler happy
        }

<# } #>
<# foreach (Type type in types) { #>
        public bool Set<#= type == typeof(object) ? "<T>" : String.Empty #>(<#= type == typeof(object) ? "T" : type.Name #> value, string propertyName)
        {
            ThrowHelper.ThrowNoBackingFieldsOfType<<#= type == typeof(object) ? "T" : type #>>(this.OnType);
            return default; // to make the compiler happy
        }

<# } #>
    }
}
