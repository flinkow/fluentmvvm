// <auto-generated>
// This file is generated by a T4 template. Make changes directly in the .tt file.
// </auto-generated>
#nullable enable
using System;
using FluentMvvm.Internals;

namespace FluentMvvm
{
#if TEST
    internal class BackingFieldsCreationDisabled : IBackingFields
#else
    internal sealed class BackingFieldsCreationDisabled : IBackingFields
#endif
    {
#if TEST
        public virtual Type OnType { get; }
#else
        public Type OnType { get; }
#endif

#if TEST
        public BackingFieldsCreationDisabled()
        {
            this.OnType = default!;
        }
#endif

        public BackingFieldsCreationDisabled(Type onType) 
        {
            this.OnType = onType;
        }

        public T Get<T>(string propertyName)
        {
            ThrowHelper.ThrowNoBackingFieldsOfType<T>(this.OnType);
            return default; // to make the compiler happy
        }

        public Boolean GetBoolean(string propertyName)
        {
            ThrowHelper.ThrowNoBackingFieldsOfType<System.Boolean>(this.OnType);
            return default; // to make the compiler happy
        }

        public Byte GetByte(string propertyName)
        {
            ThrowHelper.ThrowNoBackingFieldsOfType<System.Byte>(this.OnType);
            return default; // to make the compiler happy
        }

        public SByte GetSByte(string propertyName)
        {
            ThrowHelper.ThrowNoBackingFieldsOfType<System.SByte>(this.OnType);
            return default; // to make the compiler happy
        }

        public Char GetChar(string propertyName)
        {
            ThrowHelper.ThrowNoBackingFieldsOfType<System.Char>(this.OnType);
            return default; // to make the compiler happy
        }

        public Decimal GetDecimal(string propertyName)
        {
            ThrowHelper.ThrowNoBackingFieldsOfType<System.Decimal>(this.OnType);
            return default; // to make the compiler happy
        }

        public Double GetDouble(string propertyName)
        {
            ThrowHelper.ThrowNoBackingFieldsOfType<System.Double>(this.OnType);
            return default; // to make the compiler happy
        }

        public Single GetSingle(string propertyName)
        {
            ThrowHelper.ThrowNoBackingFieldsOfType<System.Single>(this.OnType);
            return default; // to make the compiler happy
        }

        public Int16 GetInt16(string propertyName)
        {
            ThrowHelper.ThrowNoBackingFieldsOfType<System.Int16>(this.OnType);
            return default; // to make the compiler happy
        }

        public UInt16 GetUInt16(string propertyName)
        {
            ThrowHelper.ThrowNoBackingFieldsOfType<System.UInt16>(this.OnType);
            return default; // to make the compiler happy
        }

        public Int32 GetInt32(string propertyName)
        {
            ThrowHelper.ThrowNoBackingFieldsOfType<System.Int32>(this.OnType);
            return default; // to make the compiler happy
        }

        public UInt32 GetUInt32(string propertyName)
        {
            ThrowHelper.ThrowNoBackingFieldsOfType<System.UInt32>(this.OnType);
            return default; // to make the compiler happy
        }

        public Int64 GetInt64(string propertyName)
        {
            ThrowHelper.ThrowNoBackingFieldsOfType<System.Int64>(this.OnType);
            return default; // to make the compiler happy
        }

        public UInt64 GetUInt64(string propertyName)
        {
            ThrowHelper.ThrowNoBackingFieldsOfType<System.UInt64>(this.OnType);
            return default; // to make the compiler happy
        }

        public DateTime GetDateTime(string propertyName)
        {
            ThrowHelper.ThrowNoBackingFieldsOfType<System.DateTime>(this.OnType);
            return default; // to make the compiler happy
        }

        public String GetString(string propertyName)
        {
            ThrowHelper.ThrowNoBackingFieldsOfType<System.String>(this.OnType);
            return default; // to make the compiler happy
        }

        public bool Set<T>(T value, string propertyName)
        {
            ThrowHelper.ThrowNoBackingFieldsOfType<T>(this.OnType);
            return default; // to make the compiler happy
        }

        public bool Set(Boolean value, string propertyName)
        {
            ThrowHelper.ThrowNoBackingFieldsOfType<System.Boolean>(this.OnType);
            return default; // to make the compiler happy
        }

        public bool Set(Byte value, string propertyName)
        {
            ThrowHelper.ThrowNoBackingFieldsOfType<System.Byte>(this.OnType);
            return default; // to make the compiler happy
        }

        public bool Set(SByte value, string propertyName)
        {
            ThrowHelper.ThrowNoBackingFieldsOfType<System.SByte>(this.OnType);
            return default; // to make the compiler happy
        }

        public bool Set(Char value, string propertyName)
        {
            ThrowHelper.ThrowNoBackingFieldsOfType<System.Char>(this.OnType);
            return default; // to make the compiler happy
        }

        public bool Set(Decimal value, string propertyName)
        {
            ThrowHelper.ThrowNoBackingFieldsOfType<System.Decimal>(this.OnType);
            return default; // to make the compiler happy
        }

        public bool Set(Double value, string propertyName)
        {
            ThrowHelper.ThrowNoBackingFieldsOfType<System.Double>(this.OnType);
            return default; // to make the compiler happy
        }

        public bool Set(Single value, string propertyName)
        {
            ThrowHelper.ThrowNoBackingFieldsOfType<System.Single>(this.OnType);
            return default; // to make the compiler happy
        }

        public bool Set(Int16 value, string propertyName)
        {
            ThrowHelper.ThrowNoBackingFieldsOfType<System.Int16>(this.OnType);
            return default; // to make the compiler happy
        }

        public bool Set(UInt16 value, string propertyName)
        {
            ThrowHelper.ThrowNoBackingFieldsOfType<System.UInt16>(this.OnType);
            return default; // to make the compiler happy
        }

        public bool Set(Int32 value, string propertyName)
        {
            ThrowHelper.ThrowNoBackingFieldsOfType<System.Int32>(this.OnType);
            return default; // to make the compiler happy
        }

        public bool Set(UInt32 value, string propertyName)
        {
            ThrowHelper.ThrowNoBackingFieldsOfType<System.UInt32>(this.OnType);
            return default; // to make the compiler happy
        }

        public bool Set(Int64 value, string propertyName)
        {
            ThrowHelper.ThrowNoBackingFieldsOfType<System.Int64>(this.OnType);
            return default; // to make the compiler happy
        }

        public bool Set(UInt64 value, string propertyName)
        {
            ThrowHelper.ThrowNoBackingFieldsOfType<System.UInt64>(this.OnType);
            return default; // to make the compiler happy
        }

        public bool Set(DateTime value, string propertyName)
        {
            ThrowHelper.ThrowNoBackingFieldsOfType<System.DateTime>(this.OnType);
            return default; // to make the compiler happy
        }

        public bool Set(String value, string propertyName)
        {
            ThrowHelper.ThrowNoBackingFieldsOfType<System.String>(this.OnType);
            return default; // to make the compiler happy
        }

    }
}
