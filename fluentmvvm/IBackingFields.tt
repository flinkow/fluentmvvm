<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<# Type[] types = { typeof(object), typeof(bool), typeof(byte), typeof(sbyte), typeof(char), typeof(decimal), typeof(double), typeof(float), typeof(short), typeof(ushort), typeof(int), typeof(uint), typeof(long), typeof(ulong), typeof(DateTime), typeof(string) }; #>
// <auto-generated>
// This file is generated by a T4 template. Make changes directly in the .tt file.
// </auto-generated>
#nullable enable
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;

namespace FluentMvvm
{
    internal interface IBackingFields
    {
        Type OnType { get; }

<# foreach (Type type in types) { #>
        <#= type == typeof(object) ? "T" : type.Name #> Get<#= type == typeof(object) ? "<T>" : type.Name #>(string propertyName);
<# } #>

<# foreach (Type type in types) { #>
        bool Set<#= type == typeof(object) ? "<T>" : String.Empty #>(<#= type == typeof(object) ? "T" : type.Name #> value, string propertyName);
<# } #>
    }
}
