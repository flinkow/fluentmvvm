// <auto-generated>
// This file is generated by a T4 template. Make changes directly in the .tt file.
// </auto-generated>
#nullable enable
using System;
using System.Runtime.CompilerServices;
using System.Windows.Input;
using FluentMvvm.Internals;

namespace FluentMvvm
{
    /// <summary>
    ///     An object implementing all fluent methods as methods doing nothing.
    /// </summary>
    /// <seealso cref="IPropertySetExpression" />
    /// <seealso cref="IDependencyExpression" />
    /// <seealso cref="IPropertySetExpression" />
    /// <seealso cref="IDependencyExpression" />
    internal sealed class EmptyFluentAction : IPropertySetExpression, IDependencyExpression
    {
        /// <summary>
        ///     Gets a singleton <see cref="EmptyFluentAction" />.
        /// </summary>
        /// <value>
        ///     A singleton instance of an <see cref="EmptyFluentAction" />.
        /// </value>
        public static EmptyFluentAction Default { get; } = new EmptyFluentAction();

        /// <inheritdoc />
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public IDependencyExpression Affects(string propertyName)
        {
            propertyName.NotNullOrEmptyOrWhiteSpace(nameof(propertyName));

            return this;
        }     

                /// <inheritdoc />
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public IDependencyExpression Affects(ICommand command)
        {
            command.NotNull(nameof(command));

            return this;
        }
                /// <inheritdoc />
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public IDependencyExpression Affects(IWpfCommand command)
        {
            command.NotNull(nameof(command));

            return this;
        }
        
        /// <inheritdoc />
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool WasUpdated()
        {
            return false;
        }

                /// <inheritdoc />
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public IDependencyExpression Set<T>(T value, [CallerMemberName] string propertyName = "")
        {            
            propertyName.NotNullOrEmptyOrWhiteSpace(nameof(propertyName));

            return this;
        }
                /// <inheritdoc />
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public IDependencyExpression Set(Boolean value, [CallerMemberName] string propertyName = "")
        {            
            propertyName.NotNullOrEmptyOrWhiteSpace(nameof(propertyName));

            return this;
        }
                /// <inheritdoc />
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public IDependencyExpression Set(Byte value, [CallerMemberName] string propertyName = "")
        {            
            propertyName.NotNullOrEmptyOrWhiteSpace(nameof(propertyName));

            return this;
        }
                /// <inheritdoc />
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public IDependencyExpression Set(SByte value, [CallerMemberName] string propertyName = "")
        {            
            propertyName.NotNullOrEmptyOrWhiteSpace(nameof(propertyName));

            return this;
        }
                /// <inheritdoc />
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public IDependencyExpression Set(Char value, [CallerMemberName] string propertyName = "")
        {            
            propertyName.NotNullOrEmptyOrWhiteSpace(nameof(propertyName));

            return this;
        }
                /// <inheritdoc />
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public IDependencyExpression Set(Decimal value, [CallerMemberName] string propertyName = "")
        {            
            propertyName.NotNullOrEmptyOrWhiteSpace(nameof(propertyName));

            return this;
        }
                /// <inheritdoc />
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public IDependencyExpression Set(Double value, [CallerMemberName] string propertyName = "")
        {            
            propertyName.NotNullOrEmptyOrWhiteSpace(nameof(propertyName));

            return this;
        }
                /// <inheritdoc />
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public IDependencyExpression Set(Single value, [CallerMemberName] string propertyName = "")
        {            
            propertyName.NotNullOrEmptyOrWhiteSpace(nameof(propertyName));

            return this;
        }
                /// <inheritdoc />
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public IDependencyExpression Set(Int16 value, [CallerMemberName] string propertyName = "")
        {            
            propertyName.NotNullOrEmptyOrWhiteSpace(nameof(propertyName));

            return this;
        }
                /// <inheritdoc />
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public IDependencyExpression Set(UInt16 value, [CallerMemberName] string propertyName = "")
        {            
            propertyName.NotNullOrEmptyOrWhiteSpace(nameof(propertyName));

            return this;
        }
                /// <inheritdoc />
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public IDependencyExpression Set(Int32 value, [CallerMemberName] string propertyName = "")
        {            
            propertyName.NotNullOrEmptyOrWhiteSpace(nameof(propertyName));

            return this;
        }
                /// <inheritdoc />
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public IDependencyExpression Set(UInt32 value, [CallerMemberName] string propertyName = "")
        {            
            propertyName.NotNullOrEmptyOrWhiteSpace(nameof(propertyName));

            return this;
        }
                /// <inheritdoc />
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public IDependencyExpression Set(Int64 value, [CallerMemberName] string propertyName = "")
        {            
            propertyName.NotNullOrEmptyOrWhiteSpace(nameof(propertyName));

            return this;
        }
                /// <inheritdoc />
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public IDependencyExpression Set(UInt64 value, [CallerMemberName] string propertyName = "")
        {            
            propertyName.NotNullOrEmptyOrWhiteSpace(nameof(propertyName));

            return this;
        }
                /// <inheritdoc />
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public IDependencyExpression Set(DateTime value, [CallerMemberName] string propertyName = "")
        {            
            propertyName.NotNullOrEmptyOrWhiteSpace(nameof(propertyName));

            return this;
        }
                /// <inheritdoc />
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public IDependencyExpression Set(String value, [CallerMemberName] string propertyName = "")
        {            
            propertyName.NotNullOrEmptyOrWhiteSpace(nameof(propertyName));

            return this;
        }
        
        /// <inheritdoc />
        public IDependencyExpression Set<T>(T value, ref T oldValue, [CallerMemberName] string propertyName = "")
        {
            propertyName.NotNullOrEmptyOrWhiteSpace(nameof(propertyName));

            return this;
        }
    }
}