// <auto-generated>
// This file is generated by a T4 template. Make changes directly in the .tt file.
// </auto-generated>
#nullable enable
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using FluentMvvm.Internals;

namespace FluentMvvm
{
#if TEST
    internal class BackingFields : IBackingFields
#else
    internal sealed class BackingFields : IBackingFields
#endif
    {
#if TEST
        public virtual Type OnType { get; }
#else
        public Type OnType { get; }
#endif
        
#if TEST
        internal virtual FixedSizeDictionary<System.Object> ObjectFields { get; } = null!;
        internal virtual FixedSizeDictionary<System.Boolean> BooleanFields { get; } = null!;
        internal virtual FixedSizeDictionary<System.Byte> ByteFields { get; } = null!;
        internal virtual FixedSizeDictionary<System.SByte> SByteFields { get; } = null!;
        internal virtual FixedSizeDictionary<System.Char> CharFields { get; } = null!;
        internal virtual FixedSizeDictionary<System.Decimal> DecimalFields { get; } = null!;
        internal virtual FixedSizeDictionary<System.Double> DoubleFields { get; } = null!;
        internal virtual FixedSizeDictionary<System.Single> SingleFields { get; } = null!;
        internal virtual FixedSizeDictionary<System.Int16> Int16Fields { get; } = null!;
        internal virtual FixedSizeDictionary<System.UInt16> UInt16Fields { get; } = null!;
        internal virtual FixedSizeDictionary<System.Int32> Int32Fields { get; } = null!;
        internal virtual FixedSizeDictionary<System.UInt32> UInt32Fields { get; } = null!;
        internal virtual FixedSizeDictionary<System.Int64> Int64Fields { get; } = null!;
        internal virtual FixedSizeDictionary<System.UInt64> UInt64Fields { get; } = null!;
        internal virtual FixedSizeDictionary<System.DateTime> DateTimeFields { get; } = null!;
        internal virtual FixedSizeDictionary<System.String> StringFields { get; } = null!;
#else
        private FixedSizeDictionary<System.Object> ObjectFields;
        private FixedSizeDictionary<System.Boolean> BooleanFields;
        private FixedSizeDictionary<System.Byte> ByteFields;
        private FixedSizeDictionary<System.SByte> SByteFields;
        private FixedSizeDictionary<System.Char> CharFields;
        private FixedSizeDictionary<System.Decimal> DecimalFields;
        private FixedSizeDictionary<System.Double> DoubleFields;
        private FixedSizeDictionary<System.Single> SingleFields;
        private FixedSizeDictionary<System.Int16> Int16Fields;
        private FixedSizeDictionary<System.UInt16> UInt16Fields;
        private FixedSizeDictionary<System.Int32> Int32Fields;
        private FixedSizeDictionary<System.UInt32> UInt32Fields;
        private FixedSizeDictionary<System.Int64> Int64Fields;
        private FixedSizeDictionary<System.UInt64> UInt64Fields;
        private FixedSizeDictionary<System.DateTime> DateTimeFields;
        private FixedSizeDictionary<System.String> StringFields;
#endif

#if TEST
        public BackingFields() 
        {
            this.OnType = default!;
        }
#endif

        public BackingFields(Type onType, ICollection<PropertyInfo> properties)
        {             
            this.OnType = onType;

            this.ObjectFields = FixedSizeDictionary<System.Object>.Create(properties.Where(x => !TypeHelper.DoesOverloadExist(x.PropertyType)), x => x.Name, TypeHelper.GetDefaultValue);
            this.BooleanFields = FixedSizeDictionary<System.Boolean>.Create(properties.Where(x => x.PropertyType == typeof(System.Boolean)), x => x.Name, x => (System.Boolean) TypeHelper.GetDefaultValue(x)!);
            this.ByteFields = FixedSizeDictionary<System.Byte>.Create(properties.Where(x => x.PropertyType == typeof(System.Byte)), x => x.Name, x => (System.Byte) TypeHelper.GetDefaultValue(x)!);
            this.SByteFields = FixedSizeDictionary<System.SByte>.Create(properties.Where(x => x.PropertyType == typeof(System.SByte)), x => x.Name, x => (System.SByte) TypeHelper.GetDefaultValue(x)!);
            this.CharFields = FixedSizeDictionary<System.Char>.Create(properties.Where(x => x.PropertyType == typeof(System.Char)), x => x.Name, x => (System.Char) TypeHelper.GetDefaultValue(x)!);
            this.DecimalFields = FixedSizeDictionary<System.Decimal>.Create(properties.Where(x => x.PropertyType == typeof(System.Decimal)), x => x.Name, x => (System.Decimal) TypeHelper.GetDefaultValue(x)!);
            this.DoubleFields = FixedSizeDictionary<System.Double>.Create(properties.Where(x => x.PropertyType == typeof(System.Double)), x => x.Name, x => (System.Double) TypeHelper.GetDefaultValue(x)!);
            this.SingleFields = FixedSizeDictionary<System.Single>.Create(properties.Where(x => x.PropertyType == typeof(System.Single)), x => x.Name, x => (System.Single) TypeHelper.GetDefaultValue(x)!);
            this.Int16Fields = FixedSizeDictionary<System.Int16>.Create(properties.Where(x => x.PropertyType == typeof(System.Int16)), x => x.Name, x => (System.Int16) TypeHelper.GetDefaultValue(x)!);
            this.UInt16Fields = FixedSizeDictionary<System.UInt16>.Create(properties.Where(x => x.PropertyType == typeof(System.UInt16)), x => x.Name, x => (System.UInt16) TypeHelper.GetDefaultValue(x)!);
            this.Int32Fields = FixedSizeDictionary<System.Int32>.Create(properties.Where(x => x.PropertyType == typeof(System.Int32)), x => x.Name, x => (System.Int32) TypeHelper.GetDefaultValue(x)!);
            this.UInt32Fields = FixedSizeDictionary<System.UInt32>.Create(properties.Where(x => x.PropertyType == typeof(System.UInt32)), x => x.Name, x => (System.UInt32) TypeHelper.GetDefaultValue(x)!);
            this.Int64Fields = FixedSizeDictionary<System.Int64>.Create(properties.Where(x => x.PropertyType == typeof(System.Int64)), x => x.Name, x => (System.Int64) TypeHelper.GetDefaultValue(x)!);
            this.UInt64Fields = FixedSizeDictionary<System.UInt64>.Create(properties.Where(x => x.PropertyType == typeof(System.UInt64)), x => x.Name, x => (System.UInt64) TypeHelper.GetDefaultValue(x)!);
            this.DateTimeFields = FixedSizeDictionary<System.DateTime>.Create(properties.Where(x => x.PropertyType == typeof(System.DateTime)), x => x.Name, x => (System.DateTime) TypeHelper.GetDefaultValue(x)!);
            this.StringFields = FixedSizeDictionary<System.String>.Create(properties.Where(x => x.PropertyType == typeof(System.String)), x => x.Name, x => (System.String) TypeHelper.GetDefaultValue(x)!);
        }

#if TEST
        public virtual T Get<T>(string propertyName)
#else
        public T Get<T>(string propertyName)
#endif
        {
            Debug.Assert(!String.IsNullOrWhiteSpace(propertyName));

            if (this.ObjectFields.TryGetEntry(propertyName, out FixedSizeDictionary<System.Object>.Entry? entry))
            {
                return (T) entry.Value;
            }

            propertyName = propertyName.NotNullOrEmptyOrWhiteSpace(nameof(propertyName));
            ThrowHelper.ThrowPropertyNotFound(propertyName, typeof(T), this.OnType);
            return default; // to make the compiler happy
        }

#if TEST
        public virtual Boolean GetBoolean(string propertyName)
#else
        public Boolean GetBoolean(string propertyName)
#endif
        {
            Debug.Assert(!String.IsNullOrWhiteSpace(propertyName));

            if (this.BooleanFields.TryGetEntry(propertyName, out FixedSizeDictionary<System.Boolean>.Entry? entry))
            {
                return entry.Value;
            }

            propertyName = propertyName.NotNullOrEmptyOrWhiteSpace(nameof(propertyName));
            ThrowHelper.ThrowPropertyNotFound(propertyName, typeof(System.Boolean), this.OnType);
            return default; // to make the compiler happy
        }

#if TEST
        public virtual Byte GetByte(string propertyName)
#else
        public Byte GetByte(string propertyName)
#endif
        {
            Debug.Assert(!String.IsNullOrWhiteSpace(propertyName));

            if (this.ByteFields.TryGetEntry(propertyName, out FixedSizeDictionary<System.Byte>.Entry? entry))
            {
                return entry.Value;
            }

            propertyName = propertyName.NotNullOrEmptyOrWhiteSpace(nameof(propertyName));
            ThrowHelper.ThrowPropertyNotFound(propertyName, typeof(System.Byte), this.OnType);
            return default; // to make the compiler happy
        }

#if TEST
        public virtual SByte GetSByte(string propertyName)
#else
        public SByte GetSByte(string propertyName)
#endif
        {
            Debug.Assert(!String.IsNullOrWhiteSpace(propertyName));

            if (this.SByteFields.TryGetEntry(propertyName, out FixedSizeDictionary<System.SByte>.Entry? entry))
            {
                return entry.Value;
            }

            propertyName = propertyName.NotNullOrEmptyOrWhiteSpace(nameof(propertyName));
            ThrowHelper.ThrowPropertyNotFound(propertyName, typeof(System.SByte), this.OnType);
            return default; // to make the compiler happy
        }

#if TEST
        public virtual Char GetChar(string propertyName)
#else
        public Char GetChar(string propertyName)
#endif
        {
            Debug.Assert(!String.IsNullOrWhiteSpace(propertyName));

            if (this.CharFields.TryGetEntry(propertyName, out FixedSizeDictionary<System.Char>.Entry? entry))
            {
                return entry.Value;
            }

            propertyName = propertyName.NotNullOrEmptyOrWhiteSpace(nameof(propertyName));
            ThrowHelper.ThrowPropertyNotFound(propertyName, typeof(System.Char), this.OnType);
            return default; // to make the compiler happy
        }

#if TEST
        public virtual Decimal GetDecimal(string propertyName)
#else
        public Decimal GetDecimal(string propertyName)
#endif
        {
            Debug.Assert(!String.IsNullOrWhiteSpace(propertyName));

            if (this.DecimalFields.TryGetEntry(propertyName, out FixedSizeDictionary<System.Decimal>.Entry? entry))
            {
                return entry.Value;
            }

            propertyName = propertyName.NotNullOrEmptyOrWhiteSpace(nameof(propertyName));
            ThrowHelper.ThrowPropertyNotFound(propertyName, typeof(System.Decimal), this.OnType);
            return default; // to make the compiler happy
        }

#if TEST
        public virtual Double GetDouble(string propertyName)
#else
        public Double GetDouble(string propertyName)
#endif
        {
            Debug.Assert(!String.IsNullOrWhiteSpace(propertyName));

            if (this.DoubleFields.TryGetEntry(propertyName, out FixedSizeDictionary<System.Double>.Entry? entry))
            {
                return entry.Value;
            }

            propertyName = propertyName.NotNullOrEmptyOrWhiteSpace(nameof(propertyName));
            ThrowHelper.ThrowPropertyNotFound(propertyName, typeof(System.Double), this.OnType);
            return default; // to make the compiler happy
        }

#if TEST
        public virtual Single GetSingle(string propertyName)
#else
        public Single GetSingle(string propertyName)
#endif
        {
            Debug.Assert(!String.IsNullOrWhiteSpace(propertyName));

            if (this.SingleFields.TryGetEntry(propertyName, out FixedSizeDictionary<System.Single>.Entry? entry))
            {
                return entry.Value;
            }

            propertyName = propertyName.NotNullOrEmptyOrWhiteSpace(nameof(propertyName));
            ThrowHelper.ThrowPropertyNotFound(propertyName, typeof(System.Single), this.OnType);
            return default; // to make the compiler happy
        }

#if TEST
        public virtual Int16 GetInt16(string propertyName)
#else
        public Int16 GetInt16(string propertyName)
#endif
        {
            Debug.Assert(!String.IsNullOrWhiteSpace(propertyName));

            if (this.Int16Fields.TryGetEntry(propertyName, out FixedSizeDictionary<System.Int16>.Entry? entry))
            {
                return entry.Value;
            }

            propertyName = propertyName.NotNullOrEmptyOrWhiteSpace(nameof(propertyName));
            ThrowHelper.ThrowPropertyNotFound(propertyName, typeof(System.Int16), this.OnType);
            return default; // to make the compiler happy
        }

#if TEST
        public virtual UInt16 GetUInt16(string propertyName)
#else
        public UInt16 GetUInt16(string propertyName)
#endif
        {
            Debug.Assert(!String.IsNullOrWhiteSpace(propertyName));

            if (this.UInt16Fields.TryGetEntry(propertyName, out FixedSizeDictionary<System.UInt16>.Entry? entry))
            {
                return entry.Value;
            }

            propertyName = propertyName.NotNullOrEmptyOrWhiteSpace(nameof(propertyName));
            ThrowHelper.ThrowPropertyNotFound(propertyName, typeof(System.UInt16), this.OnType);
            return default; // to make the compiler happy
        }

#if TEST
        public virtual Int32 GetInt32(string propertyName)
#else
        public Int32 GetInt32(string propertyName)
#endif
        {
            Debug.Assert(!String.IsNullOrWhiteSpace(propertyName));

            if (this.Int32Fields.TryGetEntry(propertyName, out FixedSizeDictionary<System.Int32>.Entry? entry))
            {
                return entry.Value;
            }

            propertyName = propertyName.NotNullOrEmptyOrWhiteSpace(nameof(propertyName));
            ThrowHelper.ThrowPropertyNotFound(propertyName, typeof(System.Int32), this.OnType);
            return default; // to make the compiler happy
        }

#if TEST
        public virtual UInt32 GetUInt32(string propertyName)
#else
        public UInt32 GetUInt32(string propertyName)
#endif
        {
            Debug.Assert(!String.IsNullOrWhiteSpace(propertyName));

            if (this.UInt32Fields.TryGetEntry(propertyName, out FixedSizeDictionary<System.UInt32>.Entry? entry))
            {
                return entry.Value;
            }

            propertyName = propertyName.NotNullOrEmptyOrWhiteSpace(nameof(propertyName));
            ThrowHelper.ThrowPropertyNotFound(propertyName, typeof(System.UInt32), this.OnType);
            return default; // to make the compiler happy
        }

#if TEST
        public virtual Int64 GetInt64(string propertyName)
#else
        public Int64 GetInt64(string propertyName)
#endif
        {
            Debug.Assert(!String.IsNullOrWhiteSpace(propertyName));

            if (this.Int64Fields.TryGetEntry(propertyName, out FixedSizeDictionary<System.Int64>.Entry? entry))
            {
                return entry.Value;
            }

            propertyName = propertyName.NotNullOrEmptyOrWhiteSpace(nameof(propertyName));
            ThrowHelper.ThrowPropertyNotFound(propertyName, typeof(System.Int64), this.OnType);
            return default; // to make the compiler happy
        }

#if TEST
        public virtual UInt64 GetUInt64(string propertyName)
#else
        public UInt64 GetUInt64(string propertyName)
#endif
        {
            Debug.Assert(!String.IsNullOrWhiteSpace(propertyName));

            if (this.UInt64Fields.TryGetEntry(propertyName, out FixedSizeDictionary<System.UInt64>.Entry? entry))
            {
                return entry.Value;
            }

            propertyName = propertyName.NotNullOrEmptyOrWhiteSpace(nameof(propertyName));
            ThrowHelper.ThrowPropertyNotFound(propertyName, typeof(System.UInt64), this.OnType);
            return default; // to make the compiler happy
        }

#if TEST
        public virtual DateTime GetDateTime(string propertyName)
#else
        public DateTime GetDateTime(string propertyName)
#endif
        {
            Debug.Assert(!String.IsNullOrWhiteSpace(propertyName));

            if (this.DateTimeFields.TryGetEntry(propertyName, out FixedSizeDictionary<System.DateTime>.Entry? entry))
            {
                return entry.Value;
            }

            propertyName = propertyName.NotNullOrEmptyOrWhiteSpace(nameof(propertyName));
            ThrowHelper.ThrowPropertyNotFound(propertyName, typeof(System.DateTime), this.OnType);
            return default; // to make the compiler happy
        }

#if TEST
        public virtual String GetString(string propertyName)
#else
        public String GetString(string propertyName)
#endif
        {
            Debug.Assert(!String.IsNullOrWhiteSpace(propertyName));

            if (this.StringFields.TryGetEntry(propertyName, out FixedSizeDictionary<System.String>.Entry? entry))
            {
                return entry.Value;
            }

            propertyName = propertyName.NotNullOrEmptyOrWhiteSpace(nameof(propertyName));
            ThrowHelper.ThrowPropertyNotFound(propertyName, typeof(System.String), this.OnType);
            return default; // to make the compiler happy
        }

#if TEST
        public virtual bool Set<T>(T value, string propertyName)
#else
        public bool Set<T>(T value, string propertyName)
#endif
        {
            Debug.Assert(!String.IsNullOrWhiteSpace(propertyName));

            if (this.ObjectFields.TryGetEntry(propertyName, out FixedSizeDictionary<System.Object>.Entry? entry))
            {
                if (EqualityComparer<T>.Default.Equals((T) entry.Value, value))
                {
                    return false;
                }
                entry.Value = value;
                return true;
            }
            
            propertyName = propertyName.NotNullOrEmptyOrWhiteSpace(nameof(propertyName));
            ThrowHelper.ThrowPropertyNotFound(propertyName, typeof(T), this.OnType);
            return default; // to make the compiler happy
        }

#if TEST
        public virtual bool Set(Boolean value, string propertyName)
#else
        public bool Set(Boolean value, string propertyName)
#endif
        {
            Debug.Assert(!String.IsNullOrWhiteSpace(propertyName));

            if (this.BooleanFields.TryGetEntry(propertyName, out FixedSizeDictionary<System.Boolean>.Entry? entry))
            {
                if (entry.Value == value)
                {
                    return false;
                }

                entry.Value = value;
                return true;
            }
            
            propertyName = propertyName.NotNullOrEmptyOrWhiteSpace(nameof(propertyName));
            ThrowHelper.ThrowPropertyNotFound(propertyName, typeof(System.Boolean), this.OnType);
            return default; // to make the compiler happy
        }

#if TEST
        public virtual bool Set(Byte value, string propertyName)
#else
        public bool Set(Byte value, string propertyName)
#endif
        {
            Debug.Assert(!String.IsNullOrWhiteSpace(propertyName));

            if (this.ByteFields.TryGetEntry(propertyName, out FixedSizeDictionary<System.Byte>.Entry? entry))
            {
                if (entry.Value == value)
                {
                    return false;
                }

                entry.Value = value;
                return true;
            }
            
            propertyName = propertyName.NotNullOrEmptyOrWhiteSpace(nameof(propertyName));
            ThrowHelper.ThrowPropertyNotFound(propertyName, typeof(System.Byte), this.OnType);
            return default; // to make the compiler happy
        }

#if TEST
        public virtual bool Set(SByte value, string propertyName)
#else
        public bool Set(SByte value, string propertyName)
#endif
        {
            Debug.Assert(!String.IsNullOrWhiteSpace(propertyName));

            if (this.SByteFields.TryGetEntry(propertyName, out FixedSizeDictionary<System.SByte>.Entry? entry))
            {
                if (entry.Value == value)
                {
                    return false;
                }

                entry.Value = value;
                return true;
            }
            
            propertyName = propertyName.NotNullOrEmptyOrWhiteSpace(nameof(propertyName));
            ThrowHelper.ThrowPropertyNotFound(propertyName, typeof(System.SByte), this.OnType);
            return default; // to make the compiler happy
        }

#if TEST
        public virtual bool Set(Char value, string propertyName)
#else
        public bool Set(Char value, string propertyName)
#endif
        {
            Debug.Assert(!String.IsNullOrWhiteSpace(propertyName));

            if (this.CharFields.TryGetEntry(propertyName, out FixedSizeDictionary<System.Char>.Entry? entry))
            {
                if (entry.Value == value)
                {
                    return false;
                }

                entry.Value = value;
                return true;
            }
            
            propertyName = propertyName.NotNullOrEmptyOrWhiteSpace(nameof(propertyName));
            ThrowHelper.ThrowPropertyNotFound(propertyName, typeof(System.Char), this.OnType);
            return default; // to make the compiler happy
        }

#if TEST
        public virtual bool Set(Decimal value, string propertyName)
#else
        public bool Set(Decimal value, string propertyName)
#endif
        {
            Debug.Assert(!String.IsNullOrWhiteSpace(propertyName));

            if (this.DecimalFields.TryGetEntry(propertyName, out FixedSizeDictionary<System.Decimal>.Entry? entry))
            {
                if (entry.Value == value)
                {
                    return false;
                }

                entry.Value = value;
                return true;
            }
            
            propertyName = propertyName.NotNullOrEmptyOrWhiteSpace(nameof(propertyName));
            ThrowHelper.ThrowPropertyNotFound(propertyName, typeof(System.Decimal), this.OnType);
            return default; // to make the compiler happy
        }

#if TEST
        public virtual bool Set(Double value, string propertyName)
#else
        public bool Set(Double value, string propertyName)
#endif
        {
            Debug.Assert(!String.IsNullOrWhiteSpace(propertyName));

            if (this.DoubleFields.TryGetEntry(propertyName, out FixedSizeDictionary<System.Double>.Entry? entry))
            {
                if (entry.Value == value)
                {
                    return false;
                }

                entry.Value = value;
                return true;
            }
            
            propertyName = propertyName.NotNullOrEmptyOrWhiteSpace(nameof(propertyName));
            ThrowHelper.ThrowPropertyNotFound(propertyName, typeof(System.Double), this.OnType);
            return default; // to make the compiler happy
        }

#if TEST
        public virtual bool Set(Single value, string propertyName)
#else
        public bool Set(Single value, string propertyName)
#endif
        {
            Debug.Assert(!String.IsNullOrWhiteSpace(propertyName));

            if (this.SingleFields.TryGetEntry(propertyName, out FixedSizeDictionary<System.Single>.Entry? entry))
            {
                if (entry.Value == value)
                {
                    return false;
                }

                entry.Value = value;
                return true;
            }
            
            propertyName = propertyName.NotNullOrEmptyOrWhiteSpace(nameof(propertyName));
            ThrowHelper.ThrowPropertyNotFound(propertyName, typeof(System.Single), this.OnType);
            return default; // to make the compiler happy
        }

#if TEST
        public virtual bool Set(Int16 value, string propertyName)
#else
        public bool Set(Int16 value, string propertyName)
#endif
        {
            Debug.Assert(!String.IsNullOrWhiteSpace(propertyName));

            if (this.Int16Fields.TryGetEntry(propertyName, out FixedSizeDictionary<System.Int16>.Entry? entry))
            {
                if (entry.Value == value)
                {
                    return false;
                }

                entry.Value = value;
                return true;
            }
            
            propertyName = propertyName.NotNullOrEmptyOrWhiteSpace(nameof(propertyName));
            ThrowHelper.ThrowPropertyNotFound(propertyName, typeof(System.Int16), this.OnType);
            return default; // to make the compiler happy
        }

#if TEST
        public virtual bool Set(UInt16 value, string propertyName)
#else
        public bool Set(UInt16 value, string propertyName)
#endif
        {
            Debug.Assert(!String.IsNullOrWhiteSpace(propertyName));

            if (this.UInt16Fields.TryGetEntry(propertyName, out FixedSizeDictionary<System.UInt16>.Entry? entry))
            {
                if (entry.Value == value)
                {
                    return false;
                }

                entry.Value = value;
                return true;
            }
            
            propertyName = propertyName.NotNullOrEmptyOrWhiteSpace(nameof(propertyName));
            ThrowHelper.ThrowPropertyNotFound(propertyName, typeof(System.UInt16), this.OnType);
            return default; // to make the compiler happy
        }

#if TEST
        public virtual bool Set(Int32 value, string propertyName)
#else
        public bool Set(Int32 value, string propertyName)
#endif
        {
            Debug.Assert(!String.IsNullOrWhiteSpace(propertyName));

            if (this.Int32Fields.TryGetEntry(propertyName, out FixedSizeDictionary<System.Int32>.Entry? entry))
            {
                if (entry.Value == value)
                {
                    return false;
                }

                entry.Value = value;
                return true;
            }
            
            propertyName = propertyName.NotNullOrEmptyOrWhiteSpace(nameof(propertyName));
            ThrowHelper.ThrowPropertyNotFound(propertyName, typeof(System.Int32), this.OnType);
            return default; // to make the compiler happy
        }

#if TEST
        public virtual bool Set(UInt32 value, string propertyName)
#else
        public bool Set(UInt32 value, string propertyName)
#endif
        {
            Debug.Assert(!String.IsNullOrWhiteSpace(propertyName));

            if (this.UInt32Fields.TryGetEntry(propertyName, out FixedSizeDictionary<System.UInt32>.Entry? entry))
            {
                if (entry.Value == value)
                {
                    return false;
                }

                entry.Value = value;
                return true;
            }
            
            propertyName = propertyName.NotNullOrEmptyOrWhiteSpace(nameof(propertyName));
            ThrowHelper.ThrowPropertyNotFound(propertyName, typeof(System.UInt32), this.OnType);
            return default; // to make the compiler happy
        }

#if TEST
        public virtual bool Set(Int64 value, string propertyName)
#else
        public bool Set(Int64 value, string propertyName)
#endif
        {
            Debug.Assert(!String.IsNullOrWhiteSpace(propertyName));

            if (this.Int64Fields.TryGetEntry(propertyName, out FixedSizeDictionary<System.Int64>.Entry? entry))
            {
                if (entry.Value == value)
                {
                    return false;
                }

                entry.Value = value;
                return true;
            }
            
            propertyName = propertyName.NotNullOrEmptyOrWhiteSpace(nameof(propertyName));
            ThrowHelper.ThrowPropertyNotFound(propertyName, typeof(System.Int64), this.OnType);
            return default; // to make the compiler happy
        }

#if TEST
        public virtual bool Set(UInt64 value, string propertyName)
#else
        public bool Set(UInt64 value, string propertyName)
#endif
        {
            Debug.Assert(!String.IsNullOrWhiteSpace(propertyName));

            if (this.UInt64Fields.TryGetEntry(propertyName, out FixedSizeDictionary<System.UInt64>.Entry? entry))
            {
                if (entry.Value == value)
                {
                    return false;
                }

                entry.Value = value;
                return true;
            }
            
            propertyName = propertyName.NotNullOrEmptyOrWhiteSpace(nameof(propertyName));
            ThrowHelper.ThrowPropertyNotFound(propertyName, typeof(System.UInt64), this.OnType);
            return default; // to make the compiler happy
        }

#if TEST
        public virtual bool Set(DateTime value, string propertyName)
#else
        public bool Set(DateTime value, string propertyName)
#endif
        {
            Debug.Assert(!String.IsNullOrWhiteSpace(propertyName));

            if (this.DateTimeFields.TryGetEntry(propertyName, out FixedSizeDictionary<System.DateTime>.Entry? entry))
            {
                if (entry.Value == value)
                {
                    return false;
                }

                entry.Value = value;
                return true;
            }
            
            propertyName = propertyName.NotNullOrEmptyOrWhiteSpace(nameof(propertyName));
            ThrowHelper.ThrowPropertyNotFound(propertyName, typeof(System.DateTime), this.OnType);
            return default; // to make the compiler happy
        }

#if TEST
        public virtual bool Set(String value, string propertyName)
#else
        public bool Set(String value, string propertyName)
#endif
        {
            Debug.Assert(!String.IsNullOrWhiteSpace(propertyName));

            if (this.StringFields.TryGetEntry(propertyName, out FixedSizeDictionary<System.String>.Entry? entry))
            {
                if (entry.Value == value)
                {
                    return false;
                }

                entry.Value = value;
                return true;
            }
            
            propertyName = propertyName.NotNullOrEmptyOrWhiteSpace(nameof(propertyName));
            ThrowHelper.ThrowPropertyNotFound(propertyName, typeof(System.String), this.OnType);
            return default; // to make the compiler happy
        }

    }
}
