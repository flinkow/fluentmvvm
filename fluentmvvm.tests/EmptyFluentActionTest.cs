// <auto-generated>
// This file is generated by a T4 template. Make changes directly in the .tt file.
// </auto-generated>
using System;
using System.Drawing;
using System.Windows.Input;
using AutoFixture;
using AutoFixture.AutoMoq;
using AutoFixture.Xunit2;
using Shouldly;
using Xunit;

namespace FluentMvvm.Tests
{
    public class EmptyFluentActionTest
    {
        [Fact]
        public void DefaultInstance_IsNotNull()
        {
            EmptyFluentAction.Default.ShouldNotBeNull();
        }

        [Fact]
        public void AffectsProperty_ReturnsSelf()
        {
            // Arrange
            var emptyFluentAction = new EmptyFluentAction();

            // Act & Assert
            emptyFluentAction.Affects(new Fixture().Create<string>()).ShouldBeSameAs(emptyFluentAction);
        }

        [Theory]
        [InlineData(null)]
        [InlineData("")]
        [InlineData(" ")]
        public void AffectsProperty_NullEmptyOrWhiteSpace_ShouldThrow(string propertyName)
        {
            // Arrange
            var emptyFluentAction = new EmptyFluentAction();

            // Act & Assert
            ArgumentException exception = Should.Throw<ArgumentException>(() => emptyFluentAction.Affects(propertyName));
            exception.Message.ShouldContain("null");
            exception.Message.ShouldContain("empty");
            exception.Message.ShouldContain("white-space characters");
        }

        [Fact]
        public void AffectsICommand_ReturnsSelf()
        {
            // Arrange
            var fixture = new Fixture().Customize(new AutoMoqCustomization());
            var emptyFluentAction = new EmptyFluentAction();

            // Act & Assert
            emptyFluentAction.Affects(fixture.Create<ICommand>()).ShouldBeSameAs(emptyFluentAction);
        }

        [Fact]
        public void AffectsICommand_Null_ShouldThrow()
        {
            // Arrange
            var emptyFluentAction = new EmptyFluentAction();

            // Act & Assert
            Should.Throw<ArgumentNullException>(() => emptyFluentAction.Affects((ICommand) null));
        }

        [Fact]
        public void AffectsIWpfCommand_ReturnsSelf()
        {
            // Arrange
            var fixture = new Fixture().Customize(new AutoMoqCustomization());
            var emptyFluentAction = new EmptyFluentAction();

            // Act & Assert
            emptyFluentAction.Affects(fixture.Create<IWpfCommand>()).ShouldBeSameAs(emptyFluentAction);
        }

        [Fact]
        public void AffectsWpfCommand_Null_ShouldThrow()
        {
            // Arrange
            var emptyFluentAction = new EmptyFluentAction();

            // Act & Assert
            Should.Throw<ArgumentNullException>(() => emptyFluentAction.Affects((IWpfCommand) null));
        }

        [Fact]
        public void WasUpdated_ReturnsFalse()
        {
            // Arrange
            var emptyFluentAction = new EmptyFluentAction();

            // Act & Assert
            emptyFluentAction.WasUpdated().ShouldBeFalse();
        }

        
        [Theory]
        [AutoData]
        public void Set_Generic_ReturnsSelf(string propertyName, Object value)
        {
            // Arrange
            var emptyFluentAction = new EmptyFluentAction();

            // Act & Assert
            emptyFluentAction.Set(value, propertyName).ShouldBeSameAs(emptyFluentAction);
        }

        [Theory]
        [AutoData]
        public void Set_Boolean_ReturnsSelf(string propertyName, Boolean value)
        {
            // Arrange
            var emptyFluentAction = new EmptyFluentAction();

            // Act & Assert
            emptyFluentAction.Set(value, propertyName).ShouldBeSameAs(emptyFluentAction);
        }

        [Theory]
        [AutoData]
        public void Set_Byte_ReturnsSelf(string propertyName, Byte value)
        {
            // Arrange
            var emptyFluentAction = new EmptyFluentAction();

            // Act & Assert
            emptyFluentAction.Set(value, propertyName).ShouldBeSameAs(emptyFluentAction);
        }

        [Theory]
        [AutoData]
        public void Set_SByte_ReturnsSelf(string propertyName, SByte value)
        {
            // Arrange
            var emptyFluentAction = new EmptyFluentAction();

            // Act & Assert
            emptyFluentAction.Set(value, propertyName).ShouldBeSameAs(emptyFluentAction);
        }

        [Theory]
        [AutoData]
        public void Set_Char_ReturnsSelf(string propertyName, Char value)
        {
            // Arrange
            var emptyFluentAction = new EmptyFluentAction();

            // Act & Assert
            emptyFluentAction.Set(value, propertyName).ShouldBeSameAs(emptyFluentAction);
        }

        [Theory]
        [AutoData]
        public void Set_Decimal_ReturnsSelf(string propertyName, Decimal value)
        {
            // Arrange
            var emptyFluentAction = new EmptyFluentAction();

            // Act & Assert
            emptyFluentAction.Set(value, propertyName).ShouldBeSameAs(emptyFluentAction);
        }

        [Theory]
        [AutoData]
        public void Set_Double_ReturnsSelf(string propertyName, Double value)
        {
            // Arrange
            var emptyFluentAction = new EmptyFluentAction();

            // Act & Assert
            emptyFluentAction.Set(value, propertyName).ShouldBeSameAs(emptyFluentAction);
        }

        [Theory]
        [AutoData]
        public void Set_Single_ReturnsSelf(string propertyName, Single value)
        {
            // Arrange
            var emptyFluentAction = new EmptyFluentAction();

            // Act & Assert
            emptyFluentAction.Set(value, propertyName).ShouldBeSameAs(emptyFluentAction);
        }

        [Theory]
        [AutoData]
        public void Set_Int16_ReturnsSelf(string propertyName, Int16 value)
        {
            // Arrange
            var emptyFluentAction = new EmptyFluentAction();

            // Act & Assert
            emptyFluentAction.Set(value, propertyName).ShouldBeSameAs(emptyFluentAction);
        }

        [Theory]
        [AutoData]
        public void Set_UInt16_ReturnsSelf(string propertyName, UInt16 value)
        {
            // Arrange
            var emptyFluentAction = new EmptyFluentAction();

            // Act & Assert
            emptyFluentAction.Set(value, propertyName).ShouldBeSameAs(emptyFluentAction);
        }

        [Theory]
        [AutoData]
        public void Set_Int32_ReturnsSelf(string propertyName, Int32 value)
        {
            // Arrange
            var emptyFluentAction = new EmptyFluentAction();

            // Act & Assert
            emptyFluentAction.Set(value, propertyName).ShouldBeSameAs(emptyFluentAction);
        }

        [Theory]
        [AutoData]
        public void Set_UInt32_ReturnsSelf(string propertyName, UInt32 value)
        {
            // Arrange
            var emptyFluentAction = new EmptyFluentAction();

            // Act & Assert
            emptyFluentAction.Set(value, propertyName).ShouldBeSameAs(emptyFluentAction);
        }

        [Theory]
        [AutoData]
        public void Set_Int64_ReturnsSelf(string propertyName, Int64 value)
        {
            // Arrange
            var emptyFluentAction = new EmptyFluentAction();

            // Act & Assert
            emptyFluentAction.Set(value, propertyName).ShouldBeSameAs(emptyFluentAction);
        }

        [Theory]
        [AutoData]
        public void Set_UInt64_ReturnsSelf(string propertyName, UInt64 value)
        {
            // Arrange
            var emptyFluentAction = new EmptyFluentAction();

            // Act & Assert
            emptyFluentAction.Set(value, propertyName).ShouldBeSameAs(emptyFluentAction);
        }

        [Theory]
        [AutoData]
        public void Set_DateTime_ReturnsSelf(string propertyName, DateTime value)
        {
            // Arrange
            var emptyFluentAction = new EmptyFluentAction();

            // Act & Assert
            emptyFluentAction.Set(value, propertyName).ShouldBeSameAs(emptyFluentAction);
        }

        [Theory]
        [AutoData]
        public void Set_String_ReturnsSelf(string propertyName, String value)
        {
            // Arrange
            var emptyFluentAction = new EmptyFluentAction();

            // Act & Assert
            emptyFluentAction.Set(value, propertyName).ShouldBeSameAs(emptyFluentAction);
        }

        [Theory]
        [AutoData]
        public void SetRef_ReturnsSelf(string propertyName, int value)
        {
            // Arrange
            var oldValue = new Fixture().Create<int>();
            var emptyFluentAction = new EmptyFluentAction();

            // Act & Assert
            emptyFluentAction.Set(value, ref oldValue, propertyName).ShouldBeSameAs(emptyFluentAction);
        }

        
        [Theory]
        [InlineAutoData(null)]
        [InlineAutoData("")]
        [InlineAutoData(" ")]
        public void Set_GenericWithNullEmptyOrWhiteSpace_ShouldThrow(string propertyName, Object value)
        {
            // Arrange
            var emptyFluentAction = new EmptyFluentAction();

            // Act & Assert
            ArgumentException exception = Should.Throw<ArgumentException>(() => emptyFluentAction.Set(value, propertyName));
            exception.Message.ShouldContain("null");
            exception.Message.ShouldContain("empty");
            exception.Message.ShouldContain("white-space characters");
        }

        [Theory]
        [InlineAutoData(null)]
        [InlineAutoData("")]
        [InlineAutoData(" ")]
        public void Set_BooleanWithNullEmptyOrWhiteSpace_ShouldThrow(string propertyName, Boolean value)
        {
            // Arrange
            var emptyFluentAction = new EmptyFluentAction();

            // Act & Assert
            ArgumentException exception = Should.Throw<ArgumentException>(() => emptyFluentAction.Set(value, propertyName));
            exception.Message.ShouldContain("null");
            exception.Message.ShouldContain("empty");
            exception.Message.ShouldContain("white-space characters");
        }

        [Theory]
        [InlineAutoData(null)]
        [InlineAutoData("")]
        [InlineAutoData(" ")]
        public void Set_ByteWithNullEmptyOrWhiteSpace_ShouldThrow(string propertyName, Byte value)
        {
            // Arrange
            var emptyFluentAction = new EmptyFluentAction();

            // Act & Assert
            ArgumentException exception = Should.Throw<ArgumentException>(() => emptyFluentAction.Set(value, propertyName));
            exception.Message.ShouldContain("null");
            exception.Message.ShouldContain("empty");
            exception.Message.ShouldContain("white-space characters");
        }

        [Theory]
        [InlineAutoData(null)]
        [InlineAutoData("")]
        [InlineAutoData(" ")]
        public void Set_SByteWithNullEmptyOrWhiteSpace_ShouldThrow(string propertyName, SByte value)
        {
            // Arrange
            var emptyFluentAction = new EmptyFluentAction();

            // Act & Assert
            ArgumentException exception = Should.Throw<ArgumentException>(() => emptyFluentAction.Set(value, propertyName));
            exception.Message.ShouldContain("null");
            exception.Message.ShouldContain("empty");
            exception.Message.ShouldContain("white-space characters");
        }

        [Theory]
        [InlineAutoData(null)]
        [InlineAutoData("")]
        [InlineAutoData(" ")]
        public void Set_CharWithNullEmptyOrWhiteSpace_ShouldThrow(string propertyName, Char value)
        {
            // Arrange
            var emptyFluentAction = new EmptyFluentAction();

            // Act & Assert
            ArgumentException exception = Should.Throw<ArgumentException>(() => emptyFluentAction.Set(value, propertyName));
            exception.Message.ShouldContain("null");
            exception.Message.ShouldContain("empty");
            exception.Message.ShouldContain("white-space characters");
        }

        [Theory]
        [InlineAutoData(null)]
        [InlineAutoData("")]
        [InlineAutoData(" ")]
        public void Set_DecimalWithNullEmptyOrWhiteSpace_ShouldThrow(string propertyName, Decimal value)
        {
            // Arrange
            var emptyFluentAction = new EmptyFluentAction();

            // Act & Assert
            ArgumentException exception = Should.Throw<ArgumentException>(() => emptyFluentAction.Set(value, propertyName));
            exception.Message.ShouldContain("null");
            exception.Message.ShouldContain("empty");
            exception.Message.ShouldContain("white-space characters");
        }

        [Theory]
        [InlineAutoData(null)]
        [InlineAutoData("")]
        [InlineAutoData(" ")]
        public void Set_DoubleWithNullEmptyOrWhiteSpace_ShouldThrow(string propertyName, Double value)
        {
            // Arrange
            var emptyFluentAction = new EmptyFluentAction();

            // Act & Assert
            ArgumentException exception = Should.Throw<ArgumentException>(() => emptyFluentAction.Set(value, propertyName));
            exception.Message.ShouldContain("null");
            exception.Message.ShouldContain("empty");
            exception.Message.ShouldContain("white-space characters");
        }

        [Theory]
        [InlineAutoData(null)]
        [InlineAutoData("")]
        [InlineAutoData(" ")]
        public void Set_SingleWithNullEmptyOrWhiteSpace_ShouldThrow(string propertyName, Single value)
        {
            // Arrange
            var emptyFluentAction = new EmptyFluentAction();

            // Act & Assert
            ArgumentException exception = Should.Throw<ArgumentException>(() => emptyFluentAction.Set(value, propertyName));
            exception.Message.ShouldContain("null");
            exception.Message.ShouldContain("empty");
            exception.Message.ShouldContain("white-space characters");
        }

        [Theory]
        [InlineAutoData(null)]
        [InlineAutoData("")]
        [InlineAutoData(" ")]
        public void Set_Int16WithNullEmptyOrWhiteSpace_ShouldThrow(string propertyName, Int16 value)
        {
            // Arrange
            var emptyFluentAction = new EmptyFluentAction();

            // Act & Assert
            ArgumentException exception = Should.Throw<ArgumentException>(() => emptyFluentAction.Set(value, propertyName));
            exception.Message.ShouldContain("null");
            exception.Message.ShouldContain("empty");
            exception.Message.ShouldContain("white-space characters");
        }

        [Theory]
        [InlineAutoData(null)]
        [InlineAutoData("")]
        [InlineAutoData(" ")]
        public void Set_UInt16WithNullEmptyOrWhiteSpace_ShouldThrow(string propertyName, UInt16 value)
        {
            // Arrange
            var emptyFluentAction = new EmptyFluentAction();

            // Act & Assert
            ArgumentException exception = Should.Throw<ArgumentException>(() => emptyFluentAction.Set(value, propertyName));
            exception.Message.ShouldContain("null");
            exception.Message.ShouldContain("empty");
            exception.Message.ShouldContain("white-space characters");
        }

        [Theory]
        [InlineAutoData(null)]
        [InlineAutoData("")]
        [InlineAutoData(" ")]
        public void Set_Int32WithNullEmptyOrWhiteSpace_ShouldThrow(string propertyName, Int32 value)
        {
            // Arrange
            var emptyFluentAction = new EmptyFluentAction();

            // Act & Assert
            ArgumentException exception = Should.Throw<ArgumentException>(() => emptyFluentAction.Set(value, propertyName));
            exception.Message.ShouldContain("null");
            exception.Message.ShouldContain("empty");
            exception.Message.ShouldContain("white-space characters");
        }

        [Theory]
        [InlineAutoData(null)]
        [InlineAutoData("")]
        [InlineAutoData(" ")]
        public void Set_UInt32WithNullEmptyOrWhiteSpace_ShouldThrow(string propertyName, UInt32 value)
        {
            // Arrange
            var emptyFluentAction = new EmptyFluentAction();

            // Act & Assert
            ArgumentException exception = Should.Throw<ArgumentException>(() => emptyFluentAction.Set(value, propertyName));
            exception.Message.ShouldContain("null");
            exception.Message.ShouldContain("empty");
            exception.Message.ShouldContain("white-space characters");
        }

        [Theory]
        [InlineAutoData(null)]
        [InlineAutoData("")]
        [InlineAutoData(" ")]
        public void Set_Int64WithNullEmptyOrWhiteSpace_ShouldThrow(string propertyName, Int64 value)
        {
            // Arrange
            var emptyFluentAction = new EmptyFluentAction();

            // Act & Assert
            ArgumentException exception = Should.Throw<ArgumentException>(() => emptyFluentAction.Set(value, propertyName));
            exception.Message.ShouldContain("null");
            exception.Message.ShouldContain("empty");
            exception.Message.ShouldContain("white-space characters");
        }

        [Theory]
        [InlineAutoData(null)]
        [InlineAutoData("")]
        [InlineAutoData(" ")]
        public void Set_UInt64WithNullEmptyOrWhiteSpace_ShouldThrow(string propertyName, UInt64 value)
        {
            // Arrange
            var emptyFluentAction = new EmptyFluentAction();

            // Act & Assert
            ArgumentException exception = Should.Throw<ArgumentException>(() => emptyFluentAction.Set(value, propertyName));
            exception.Message.ShouldContain("null");
            exception.Message.ShouldContain("empty");
            exception.Message.ShouldContain("white-space characters");
        }

        [Theory]
        [InlineAutoData(null)]
        [InlineAutoData("")]
        [InlineAutoData(" ")]
        public void Set_DateTimeWithNullEmptyOrWhiteSpace_ShouldThrow(string propertyName, DateTime value)
        {
            // Arrange
            var emptyFluentAction = new EmptyFluentAction();

            // Act & Assert
            ArgumentException exception = Should.Throw<ArgumentException>(() => emptyFluentAction.Set(value, propertyName));
            exception.Message.ShouldContain("null");
            exception.Message.ShouldContain("empty");
            exception.Message.ShouldContain("white-space characters");
        }

        [Theory]
        [InlineAutoData(null)]
        [InlineAutoData("")]
        [InlineAutoData(" ")]
        public void Set_StringWithNullEmptyOrWhiteSpace_ShouldThrow(string propertyName, String value)
        {
            // Arrange
            var emptyFluentAction = new EmptyFluentAction();

            // Act & Assert
            ArgumentException exception = Should.Throw<ArgumentException>(() => emptyFluentAction.Set(value, propertyName));
            exception.Message.ShouldContain("null");
            exception.Message.ShouldContain("empty");
            exception.Message.ShouldContain("white-space characters");
        }

        [Theory]
        [InlineAutoData(null)]
        [InlineAutoData("")]
        [InlineAutoData(" ")]
        public void SetRef_WithNullEmptyOrWhiteSpace_ShouldThrow(string propertyName, int value)
        {
            // Arrange
            var oldValue = new Fixture().Create<int>();
            var emptyFluentAction = new EmptyFluentAction();

            // Act & Assert
            ArgumentException exception = Should.Throw<ArgumentException>(() => emptyFluentAction.Set(value, ref oldValue, propertyName));
            exception.Message.ShouldContain("null");
            exception.Message.ShouldContain("empty");
            exception.Message.ShouldContain("white-space characters");
        }
    }
}